"------------------------------------------------------------------------------
" File:     $XDG_CONFIG_HOME/nvim/init.vim
"           $HOME/.vimrc
" Author:   Kevin K. <kbknapp@gmail.com>
"
" Based on https://github.com/s3rvac/dotfiles/blob/master/vim/.vimrc
"------------------------------------------------------------------------------

" ==================
" ===== Vundle =====
" ==================

" required by Vundle
set nocompatible			" Don't use backwards compat with Vi
filetype off

" Set the runtime path to include Vundle and it's init
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" ----- Core Plugin (required) -----

" Must come first
Plugin 'VundleVim/Vundle.vim'

" ----- Main Plugins -----

" Solarized colors
" Plugin 'altercation/vim-colors-solarized'

" Dracula colors
Plugin 'dracula/vim'

" Solidity
" Plugin 'tomlion/vim-solidity'

" Ctrl+P Fuzzy Matching Files
"     -> <c-p> / :CtrlP [dir]    Fuzzy Match Files
"     -> :CtrlPBuffer            Search Buffers
"     -> :CtrlPMixed             Files, Buffers, and MRU
Plugin 'kien/ctrlp.vim'
let g:ctrlp_map = "<c-p>"
nnoremap <C-p> :CtrlPMixed<CR>
nnoremap <C-m> :CtrlPMRU<CR>
nnoremap <C-b> :CtrlPBuffer<CR>

" Visualize your Undo Tree
"     -> :GundoToggle           See Undo Tree
Plugin 'sjl/gundo.vim'
"nnoremap <F5> :GundoToggle<CR>
nnoremap <C-u> :GundoToggle<CR>
" persist (g)undo tree between sessions
set undofile
set undolevels=100

" File Explorer
"     -> :NERDTreeToggle        See File Tree
Plugin 'scrooloose/nerdtree'
map <C-n> :NERDTreeToggle<CR>

" Syntax Checking
Plugin 'scrooloose/syntastic'

"Plugin 'neomake/neomake'
"set makeprg=cargo\ rustc\ -Zno-trans
"autocmd! BufWritePost * Neomake
"let g:neomake_open_list = 2
"let g:neomake_verbose=3
"let g:neomake_logfile='/tmp/ergror.log'

" List Toggle for Location/Quick Fix list
"Plugin 'Valloric/ListToggle'
"let g:lt_location_list_toggle_map = '<leader>l'
"let g:lt_quickfix_list_toggle_map = '<leader>q'
"let g:lt_height = 10

" Comment or UN-Comment Code
"     -> gcc                  Comment or uncomment line(s)
Plugin 'vim-scripts/tComment'
nnoremap <C-/> gcc

" better find support
"     -> f           FORWARD
"     -> F           BACKWARDS
"     -> t           Till
Plugin 'rhysd/clever-f.vim'
let g:clever_f_show_prompt = 1
let g:clever_f_across_no_line = 0   " Enable for multi line (1=current line only)

" Better surround support
"     -> cs"'     "Hello"->'Hello'
"     -> ysiw[   'Hello'->[Hello]
"     -> ds[     [Hello]->Hello
Plugin 'tpope/vim-surround'

" Repeat all commands with . not just native
Plugin 'tpope/vim-repeat'

" Better pattern matching, includes 3 plugins
"     -> COERCION
"         - crs           Coerce to snake_case
"         - cru           Coerce to UPPER_CASE
"         - crm           Coerce to MixedCase
"         - crc           Coerce to camelCase
"     -> SUBSTITUION
"         - :Subvert/di{e,ce}/spinner{,s}/g
"     -> Abbreviations
"         - :Abolish {despa,sepe}rat{e,es,ed,ing,ely,ion,ions,or} {despe,sepa}rat{}
Plugin 'tpope/vim-abolish'

" autocompletion
" Plugin 'Valloric/YouCompleteMe'

" Quickly Select Buffers
"     -> be             Normal
"     -> bt             Toggle
"     -> bs             Horizontal Split
"     -> bv             Vertical Split
Plugin 'jlanzarotta/bufexplorer'

" Session management
"     -> :SaveSession
"     -> :OpenSession
"Plugin 'xolox/vim-session'
"Plugin 'xolox/vim-misc'
"let g:session_directory = ".config/nvim/session"
"let g:session_autoload = "no"
"let g:session_autosave = "no"
"let g:session_command_aliases = 1
"nnoremap <leader>so :OpenSession
"nnoremap <leader>ss :SaveSession
"nnoremap <leader>sd :DeleteSession<CR>
"nnoremap <leader>sc :CloseSession<CR>

"Plugin 'vim-airline/vim-airline'
"Plugin 'vim-airline/vim-airline-themes'
"let g:airline_powerline_fonts=1
"let g:airline_theme="luna"
" let g:airline_section_warning = airline#section#create([ "syntastic" ])
"let g:airline#extensions#branch#empty_message = "No SCM"
"let g:airline#extensions#whitespace#enabled = 0
"let g:airline#extensions#syntastic#enabled = 1
"let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
"let g:airline#extensions#tabline#fnamecollapse = 1 " /a/m/model.rb
"let g:airline#extensions#hunks#non_zero_only = 1 " git gutter
""if !exists("g:airline_symbols")
"  let g:airline_symbols = {}
"endif
"let g:airline_theme="powerlineish"

" ----- Git Plugins -----
Plugin 'tpope/vim-fugitive'

" +,-,~ in gutter
Plugin 'airblade/vim-gitgutter'

" ----- Rust Plugins -----
Plugin 'rust-lang/rust.vim'
Plugin 'racer-rust/vim-racer'

" enable all plugins, required by Vundel
call vundle#end()
filetype plugin indent on

" ==========================
" ===== General Config =====
" ==========================
" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
set encoding=utf-8
set autoindent                  " Indent if preivous line is indented
set backspace=indent,eol,start  " Allow backspace in insert mode over autoindent, line breaks, and start of insert action
set history=10000               " Store lots of :cmdline history (default is 20)
set mouse=a                     " Enable mouse usage
set laststatus=2                " Always show statusbar
set smarttab
set ttyfast                     " Smoother changes
set wildmenu                    " Better command line completion
set expandtab                   " Use spaces not tabs
set softtabstop=4
set tabstop=4                   " Use 4 spaces
set nostartofline               " Keep the cursor in the current column with page cmds.
"set noshowmatch                 " Don't show matching brackets when typing
set shiftwidth=4                " Use 4 spaces for indents
set title                       " Show the title in the vim title bar
set number                      " Line numbers are good
"set relativenumber              " Show relative line numbers
set ruler                       " Show cursor position in status instead of full line numbers
set showcmd                     " Show incomplete cmds down the bottom
set showmode                    " Show current mode down the bottom
set noshowmode                  " Don't show current mode
set gcr=a:blinkon0              " Disable cursor blink
set nojoinspaces                " Insert just one space joining lines with J.
set visualbell                  " No sounds
set autoread                    " Reload files changed outside vim
set ls=2                        " Show status bar with file path and name
set confirm                     " Instead of failing cmd from no save, ask to save
set wildmode=list:longest       " Only complete up to the point of ambiguity (i.e. like a shell)
set scrolloff=3                 " Show lines of context around the cursor when scrolling
set nowrap                      " Don't wrap lines
"set linebreak                  " Wrap lines at convenient points
set cursorline                  " Highlight current line
set shell=/usr/bin/zsh          " Use zsh as the shell
set completeopt -=preview
set colorcolumn=100             " Set a highlighted column to give reference for long lines
set hidden                      " Buffers can exist in the background without being in a window.

" ---------- Backup and swap files -------
set nobackup            " Disable backup files.
set noswapfile          " Disable swap files.
set nowritebackup       " Disable auto backup before overwriting a file.
" Store temp files in specific loctions
set backupdir=~/.vim/bak,~/.bak,/tmp
set directory=~/.vim/tmp,~/.tmp,/tmp

" ------------- Security -----------------
set secure              " Forbid loading of .vimrc under $PWD.
set nomodeline          " Modelines have been a source of vulnerabilities.

" ----- syntax highlighting / display -----
syntax on
syntax enable
set background=dark
try
    colorscheme dracula
catch /^Vim\%((\a\+)\)\=:E185/
    " deal with it
endtry
let g:solarized_termcolors=256      " If terminal doesn't support solarized color palettes

" Catch trailing whitespace when desired (<leader>s)
set list listchars=tab:>-,trail:Â·,eol:$
nmap <silent> <leader>s :set nolist!<CR>


" ============== Copy / Paste ========================
set pastetoggle=<F10>            " Toggle between paste/nopaste with <F10>
set pastetoggle=<leader>pt
set paste                        " Turn on paste mode always
set nrformats=                   " make C-a, C-x work properly
" Alias the unnamed clipboard to the Linux X11 clipboard
set clipboard=unnamedplus

" =============== Search Settings ===================
if !has('nvim')
	set hlsearch                    " Highlight searches (Use <C-L> to temporarily disable)
	set incsearch                   " highlight incrementally as they are typed
endif
set ignorecase                  " Ignore case when searching
set smartcase                   " Except when using capital letters

" Remap <C-L> (redraw screen) to disable search highlight until next search
nnoremap <C-L> :nohl<CR><C-L>

" ===== Folds =====
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 3 levels
set nofoldenable        "dont fold by default

" ===============================================================
" ================ Re-Maps ======================================
" ===============================================================

" The leader and local-leader characters.
let mapleader = ","
let maplocalleader = ","

nmap <leader>so :source $MYVIMRC
nmap <leader>vr :e $MYVIMRC

" Jump to the previous/next tab.
"noremap <silent> H gT
"noremap <silent> L gt

" Move visual lines, not phyiscal lines
nmap j gj
nmap k gk

" Join lines
" nnoremap <silent> J :join
" Join lines without producing any spaces. It works like gJ, but does not keep
" the indentation whitespace.
" Based on http://vi.stackexchange.com/a/440.
function! s:JoinWithoutSpaces()
	normal! gJ
	" Remove any whitespace.
	if matchstr(getline('.'), '\%' . col('.') . 'c.') =~ '\s'
		normal! dw
	endif
endfunction
noremap <silent> <Leader>J :call <SID>JoinWithoutSpaces()<CR>

" Quicksave all buffers.
" (Use both :w and :wa to force write of the currently edited buffer, even if
" there are no changes. This forces removal of trailing whitespace from the
" buffer and also overwrites of the file even if it has changed, which is
" sometimes handy.)
nnoremap <silent> <C-s> :w<CR>:wa<CR>
inoremap <silent> <C-s> <Esc>:w<CR><Esc>:wa<CR>
vnoremap <silent> <C-s> <Esc>:w<CR><Esc>:wa<CR>

" Make Ctrl-e jump to the end of the line in the insert mode.
inoremap <C-e> <C-o>$

" Stay in visual mode when indenting.
vnoremap < <gv
vnoremap > >gv

" Quickly select the text I just pasted.
noremap gV `[v`]

" Hitting space in normal/visual mode will make the current search disappear.
noremap <silent> <Space> :silent nohlsearch<CR>

" Insert the contents of the clipboard.
nnoremap <silent> <Leader>P :set paste<CR>"+]P:set nopaste<CR>
nnoremap <silent> <Leader>p :set paste<CR>"+]p:set nopaste<CR>
vnoremap          <Leader>p "+p

" ---------------- Function Keys -------------------------------
" F1: Toggle spell checker.
nnoremap <silent> <F1> :set spell!<CR>:set spell?<CR>

" F2: Toggle the display of unprintable characters.
nnoremap <silent> <F2> :set list!<CR>:set list?<CR>
function! s:ToggleExceedingCharsHighlight()
	if exists('w:long_line_match')
		silent! call matchdelete(w:long_line_match)
		unlet w:long_line_match
		echo 'Disable highlighting.'
	elseif &textwidth > 0
		let w:long_line_match=matchadd('ExceedCharsGroup', '\%>' . &textwidth . 'v.\+', -1)
		echo 'Enable highlighting after ' . &textwidth . ' characters.'
	else
		let w:long_line_match=matchadd('ExceedCharsGroup', '\%>80v.\+', -1)
		echo 'Enable highlighting after 80 characters.'
	endif
endfunction
nnoremap <silent> <S-F2> :call <SID>ToggleExceedingCharsHighlight()<CR>

" F3: Toggle line wrapping.
nnoremap <silent> <F3> :set nowrap!<CR>:set nowrap?<CR>

" F4:

" F5:

" F6: Toggle relative/absolute numbers.
nnoremap <silent> <F6> :set relativenumber!<CR>:set relativenumber?<CR>

" F7:

" F8:

" F9:

" F10: Toggles Paste Mode

" F11:

" F12:

" Enable faster viewport scrolling
nnoremap <C-e> 4<C-e>
nnoremap <C-y> 4<C-y>
" Make j/k work by actual line count if preceded with number, otherwise like gj/gk
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')

" Working with Splits
set splitright          " Open new vertical panes in the right rather than left.
set splitbelow          " Open new horizontal panes in the bottom rather than top.
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" consistent menu navigation
inoremap <C-j> <C-n>
inoremap <C-k> <C-p>

" Make Y act like D and C, i.e. yank till EOL rather than yy
map Y y$

" ===============================================================
" ================ Use Ripgrep with Ctrl-P  =====================
" ===============================================================

if executable('rg')
  let g:ctrlp_user_command = 'rg --files %s'
  let g:ctrlp_use_caching = 0
  let g:ctrlp_working_path_mode = 'ra'
  let g:ctrlp_switch_buffer = 'et'
endif

" ===============================================================
" ================ Language Specific  ===========================
" ===============================================================

" -------------------- Rust ------------------------------------
" These settings are for Rust-lang specific features
" and Racer auto-complete
"let g:racer_cmd = "~/.bin/racer"
"let $RUST_SRC_PATH="/usr/local/src/rust/src"
let g:racer_cmd = "~/.cargo/bin/racer"

" ===============================================================
" ================ Filetype Specific ============================
" ===============================================================

" ------------- Rust Files --------------
autocmd FileType rust nmap gd <Plug>(rust-def)
autocmd FileType rust nmap gs <Plug>(rust-def-split)
autocmd FileType rust nmap gx <Plug>(rust-def-vertical)
autocmd FileType rust nmap <leader>gd <Plug>(rust-doc)

" ------------- Markdown Files --------------
" Visually wrap long lines in Markdown
autocmd BufRead,BufNewFile   *.md setlocal wrap linebreak nolist
autocmd BufRead,BufNewFile   *.py setlocal colorcolumn=80
autocmd BufRead,BufNewFile   *.rs setlocal colorcolumn=99

" ------------- Help Files --------------
" Allow 'q' to quit help documents
autocmd FileType help nmap q :q<cr>


" Capture current file path into clipboard
function! CaptureFile()
  let @+ = expand('%')
endfunction
map <leader>f :call CaptureFile()<cr>

" Rename current file
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'))
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>n :call RenameFile()<cr>


" Fix indentation in file
map <leader>i mmgg=G`m<CR>

" Toggle highlighting of search results
nnoremap <leader><space> :nohlsearch<cr>

"-------------------------------------------------------------------------------
" Firefox "It's all text plugin".
"-------------------------------------------------------------------------------

" augroup firefox_its_all_text
" au!
" let s:opened_file_path = expand('%:p')
" if s:opened_file_path =~ '\.mozilla/firefox/'
" 	" Enable Czech spell checking by default.
" 	au BufRead,BufNewFile *.txt setl spell
" 	au BufRead,BufNewFile *.txt setl spelllang=cs
"
" 	au BufRead,BufNewFile *.txt setl ft=html
" endif
" augroup end

" Turn VIM into a wordprocessor
function! WordProcessor()
  " formatting text
  setlocal formatoptions=1
  setlocal noexpandtab
  setlocal wrap
  setlocal linebreak
  " spelling and thesaurus
  setlocal spell spelllang=en_us
  set thesaurus+=/home/kevin/.vim/thesaurus/mthesaur.txt
  " complete+=s makes autocompletion search the thesaurus
  set complete+=s
endfunction
com! WP call WordProcessor()
