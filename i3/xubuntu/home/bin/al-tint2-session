#!/usr/bin/env bash
#
# al-tint2-session: a script to read a saved Tint2 session file
# Copyright (C) 2015 damo    <damo@bunsenlabs.org>
# Borrowed with love by the ArchLabs boys.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# To start the chosen Tint2 session at login, add the following line
# to ~/.config/openbox/autostart:
#
#      al-tint2-session &
#
########################################################################

CONFPATH="$HOME/.config/tint2"
USAGE="USAGE:\n\tal-tint2-session [OPTIONS] [SESSIONFILE]
\nOPTIONS:\n\n\t-z, --session\tUse entered SESSIONFILE rather than default
\t-h, --help\tPrint this usage message and exit
\n\tWith no command argument, the script uses the default session file
\n\t'$CONFPATH/sessions/$WM-sessionfile'
\n\nTo start session at login, add the following line to autostart:
\n\tal-tint2-session &"


# check we have required programs installed
if ! hash tint2 read &>/dev/null; then
    echo "[ERROR]: Missing Commands. It is required to install 'tint2' 'readline'"
    exit 1
fi

# This should be done first in order to determine WM for other variables
# loop over window_Managers until we get a match at which point set WM=match and break loop
window_Managers=(bspwm i3 openbox awesome xfce)
for i in "${window_Managers[@]}"; do
    if [[ "$(wmctrl -m | grep -i name | awk '{print tolower($2)}')" == "$i" ]]; then
        WM=$i && break
    elif [[ "$(xprop -root -notype | grep "WM_NAME =" | tr -d '"' | awk '{print tolower($3)}')" == "$i" ]]; then
        WM=$i && break
    elif [[ "$(awk '{print tolower($0)}' <<< $XDG_CURRENT_DESKTOP)" == "$i" ]]; then
        WM=$i && break
    fi
done

# If $WM is set, set sessionfile to $WM-sessionfile
# Otherwise default to just sessionfile
# NOTE: this will get overwritten if passed a sessionfile
if [[ $WM ]]; then
    SESSIONFILE="$CONFPATH/sessions/$WM-sessionfile"
else
    SESSIONFILE="$CONFPATH/sessions/sessionfile"
fi

# Check 1st arg, if help, echo help message
# When trying to set session, test that $2 is set
# If it is, set SESSIONFILE to $2 otherwise exit error
case $1 in
    -h|-H|--help)
        clear; echo -e "$USAGE"; exit 0
        ;;
    -z|*session)
        if [[ $2 ]] && [ -f "$2" ]; then
            SESSIONFILE="$2"
        else
            echo "Invalid Session.. Exiting"; exit 2
        fi
esac


# kill all running tint2 and polybar instances
# check if the sessionfile passed in exists
# run each line in sessionfile as tint2 config
# ignoring comment lines, empty lines and lines of whitespace
start_Session() {
    if [ -f "$SESSIONFILE" ]; then
        while [[ $(pidof tint2) ]]; do pkill tint2; sleep 0.2; done
        while read -r c; do
            if [[ "$c" =~ ^#.*$ ]] || [[ "$c" == "" ]]; then continue; fi
            if [[ -f "$c" ]]; then tint2 -c "$c" && sleep 0.2; fi
        done < "$SESSIONFILE"
    else
        echo -e "No suitable sessions found\n\nTry running al-tint2zen or al-panel chooser to setup a session"
    fi
    sleep 1.5
    if ! [[ "$(pidof tint2)" ]] && hash al-tint2zen &>/dev/null; then
        al-tint2zen &
    fi
}

start_Session

exit 0
