#!/bin/sh

# Copyright 2015 Antonio Malcolm, released under an MPL, v. 2.0, license. All rights reserved.
#
# This file is part of Corgi Scripts (also referred to as corgi-scripts).
#
# Corgi Scripts is subject to the terms of the Mozilla Public License, v. 2.0. 
# If a copy of the MPL was not distributed with this file, 
# you can obtain one at http://mozilla.org/MPL/2.0/.
#
# Corgi Scripts is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either expressed or implied.
# See LICENSE.txt, for the specific language governing rights and limitations under the License,
# which should have been provided with this software, or visit http://mozilla.org/MPL/2.0/.

# corgi-openbox-menus-network - Generates an Openbox Pipemenu for managing network devices and connections.
#
# v2015.06.17
#
# Authored by Antonio Malcolm
#
# Requires: corgi-openbox-menus-network.shlib
# Requires: corgi-network-management.shlib (normally provided by corgi-openbox-menus-network.shlib)
# Requires: corgi-openbox-menus-core.shlib (normally provided by corgi-openbox-menus-network.shlib)
# Requires: corgi-posix-core.shlib (normally provided by corgi-openbox-menus-network.shlib)

exitStatus=1
currentDirectory="`dirname "$0"`"
currentDirectory="`cd "$currentDirectory" ; pwd -P `"
parentDirectory="`dirname $currentDirectory`"
corgiObMenusNetworkLib="$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-network.shlib"

if [ ! -e "$corgiObMenusNetworkLib" ]
then
  logger "ERROR (corgi-openbox-menus-network): $corgiObMenusNetworkLib is missing. Exiting..."
  echo "ERROR (corgi-openbox-menus-network): $corgiObMenusNetworkLib is missing. Exiting..."
  exit $exitStatus
fi

. "$corgiObMenusNetworkLib"

pipeMenu=''
pipeMenuContent=''

connectionStatusAll="`getNetworkHardwareStatus`"
connectionStatusWifi="`getWirelessHardwareStatus`"

if [ "$connectionStatusAll" = "$corgiNoBone" -o "$connectionStatusWifi" = "$corgiNoBone" ]
then
  pipeMenuContent="`corgiObMenuItem "label:This requires the NetworkManager package."`"
else

  if [ -z "$connectionStatusAll" ]
  then
    pipeMenuContent="`corgiObMenuItem "label:Can't get the network hardware status!"`"
  else

    shouldAppendConnectionProfiles=false
    shouldAppendWifiNetworks=false

    if [ "$connectionStatusAll" = 'disabled' ]
    then
      toggleNetworkCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-network.shlib\" ; toggleNetworkingState on'"
      pipeMenuContent="`corgiObMenuItem "label:Enable All" "action:Execute" "command:$toggleNetworkCommand"`"
    else

      shouldAppendConnectionProfiles=true
      toggleNetworkCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-network.shlib\" ; toggleNetworkingState off'"
      pipeMenuContent="`corgiObMenuItem "label:Disable All" "action:Execute" "command:$toggleNetworkCommand"`"

      if [ -z "$connectionStatusWifi" ]
      then
        pipeMenuContent="$pipeMenuContent`corgiMenuObItem "label:Can't get the wireless hardware status!"`"
      elif [ "$connectionStatusWifi" = 'disabled' ]
      then
        toggleWifiCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-network.shlib\" ; toggleWifiState on'"
        pipeMenuContent="$pipeMenuContent`corgiObMenuItem "label:Enable Wireless" "action:Execute" "command:$toggleWifiCommand"`"
      else
        shouldAppendWifiNetworks=true
        toggleWifiCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-network.shlib\" ; toggleWifiState off'"
        pipeMenuContent="$pipeMenuContent`corgiObMenuItem "label:Disable Wireless" "action:Execute" "command:$toggleWifiCommand"`"
      fi    

    fi

    menuId="`corgiMakeIdString "corgi-menus-network-device-profiles-"`"
    devicesMenuCommand="sh -c 'cd &quot;$currentDirectory&quot; ; . &quot;$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-network.shlib&quot; ; buildDeviceProfilesMenu'"
    pipeMenuContent="$pipeMenuContent`corgiObMenu "id:$menuId" "label:Device Profiles" "execute:$devicesMenuCommand"`"

    if [ $shouldAppendConnectionProfiles = true ]
    then
      menuId="`corgiMakeIdString "corgi-menus-network-connection-profiles-"`"
      connectionsMenuCommand="sh -c 'cd &quot;$currentDirectory&quot; ; . &quot;$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-network.shlib&quot; ; buildConnectionProfilesMenu $shouldAppendWifiNetworks'"
      pipeMenuContent="$pipeMenuContent`corgiObMenu "id:$menuId" "label:Connection Profiles" "execute:$connectionsMenuCommand"`"
    fi

    if [ $shouldAppendWifiNetworks = true ]
    then

      menuId="`corgiMakeIdString "corgi-menus-network-wifi-networks-visible-"`"
      wifiMenuCommand="sh -c 'cd &quot;$currentDirectory&quot; ; . &quot;$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-network.shlib&quot; ; buildWifiNetworksMenu'"
      pipeMenuContent="$pipeMenuContent`corgiObMenu "id:$menuId" "label:Wireless Networks" "execute:$wifiMenuCommand"`"

      menuId="`corgiMakeIdString "corgi-menus-network-wifi-networks-hidden-"`"
      wifiMenuCommand="sh -c 'cd &quot;$currentDirectory&quot; ; . &quot;$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-network.shlib&quot; ; buildWifiNetworksMenu &quot;hidden&quot;'"
      pipeMenuContent="$pipeMenuContent`corgiObMenu "id:$menuId" "label:Wireless Networks (Hidden)" "execute:$wifiMenuCommand"`"

      connectToWifiCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-network.shlib\" ; connectToWifiNetwork'"
      connectToWifiItem="`corgiObMenuItem "label:Add a Wireless Network" "action:Execute" "command:$connectToWifiCommand"`"
      pipeMenuContent="$pipeMenuContent$wifiNetworkMenus$connectToWifiItem"

      connectToHiddenWifiCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-network.shlib\" ; connectToWifiNetwork \"\" \"\" true'"
      connectToHiddenWifiItem="`corgiObMenuItem "label:Add a Hidden Wireless Network" "action:Execute" "command:$connectToHiddenWifiCommand"`"
      pipeMenuContent="$pipeMenuContent$wifiNetworkMenus$connectToHiddenWifiItem"

    fi

  fi

fi

pipeMenu="`corgiObPipeMenu "content:$pipeMenuContent"`"
exitStatus=$?

if [ -z "$pipeMenu" ]
then
  logger "ERROR (corgi-openbox-menus-networkmanager): Unable to generate pipe menu. Exiting..."
  echo "ERROR (corgi-openbox-menus-networkmanager): Unable to generate pipe menu. Exiting..."
else
  echo "$pipeMenu"
fi

exit $exitStatus
