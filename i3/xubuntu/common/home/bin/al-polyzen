#!/usr/bin/env bash


# al-polyzen: polybar session manager script for ArchLabs

# unless an alternate sessionfile is specified use WM-sessionfile
# create a gui dialog with available bars found in config path
# checkmarked bars will be added to sessionfile and started
# starting bars is handled by either my seperate start-polybar script
# or by polybar itself as a fallback if start-polybar script not found

# Copyright (C) 2017 Nathaniel Maia <natemaia10@gmail.com>
# This program is provided free of charge and without warranty
# I ask that if you use this program and make additions/changes
# that you share and contribute back additions/changes

#######################################################################

if ! hash polybar zenity find read &>/dev/null; then
    echo "[ERROR]: Missing Commands. It is required to install 'polybar' 'zenity' 'readline' 'findutils'"
    exit 1
fi

window_Managers=(bspwm i3 openbox awesome xfce)
for i in "${window_Managers[@]}"; do
    if [[ "$(wmctrl -m | grep -i name | awk '{print tolower($2)}')" == "$i" ]]; then
        WM=$i && break
    elif [[ "$(xprop -root -notype | grep "WM_NAME =" | tr -d '"' | awk '{print tolower($3)}')" == "$i" ]]; then
        WM=$i && break
    elif [[ "$(awk '{print tolower($0)}' <<< $XDG_CURRENT_DESKTOP)" == "$i" ]]; then
        WM=$i && break
    fi
done

CONFPATH="$HOME/.config/polybar"
if [[ $WM ]]; then
    SESSIONFILE="$CONFPATH/sessions/$WM-sessionfile"
else
    SESSIONFILE="$CONFPATH/sessions/sessionfile"
fi

USAGE="\v\tUSAGE: [OPTIONS] [SESSIONFILE]
\n\t-z, --session\tUse entered SESSIONFILE rather than default
\t-h, --help\tPrint this usage message and exit
\n\tWith no command argument, the script uses the current WM session file
\n\t\t$SESSIONFILE
\v\tTo start session at login, add the following line to autostart:
\v\t\tsleep 1; al-polybar-session &"
TITLE="ArchLabs Polybar Manager"
ICON="--window-icon=/usr/share/icons/hicolor/256x256/apps/al-hello-logo.png"

case $1 in
    -h|-H|*help)
        echo -e "$USAGE" && exit 0
        ;;
    -z|*session)
        if [[ $2 ]]; then
            SESSIONFILE=$2
        else
            echo "Invalid Session.. Exiting" && exit 2
        fi
esac

running_Bars() {
    TEMPFILE=$(mktemp --tmpdir polybars.XXXX)
    if pgrep -a polybar &>/dev/null; then pgrep -a polybar >> "$TEMPFILE"; fi
}

find_Bars() {
    unset n BARS bar_Names barArray checkMark barPath
    local n=0
    fill_Arrays() {
        barPath[$1]="$2"
        barArray[$1]="$3"
        if grep -q "$2\ $3$" $TEMPFILE; then checkMark[$1]="TRUE"; else checkMark[$1]="FALSE"; fi
    }
    for config in $(find "$CONFPATH" -maxdepth 4 -type f); do
        bar_Names=($(grep '^\[bar/.*\]$' $config | sed 's/]//' | cut -d '/' -f2))
        for bar in "${bar_Names[@]}"; do
            if [[ "$bar" != "master" ]]; then fill_Arrays $n $config $bar; fi
            n=$((n + 1))
        done
    done
    for ((i=0; i<=${#barArray[@]}; i++)); do BARS="$BARS ${checkMark[$i]} ${barArray[$i]}"; done
}


# should only be called by the selection dialog
# creates sessionfile, adding each returned bar and its path to it
# Determine best way to start session, if polybar isnt installed echo error message
create_Session() {
    mkdir -p $CONFPATH/sessions; echo -e "# Polybar $WM Sessionfile
    \n# DO NO edit this file, it will be overwritten by al-polyzen\n# Instead make a custom sessionfile and use the -z FILE or --session FILE option
    \n# To load session at startup use the following line\n\n# sleep 1; al-polybar-session &\n" > $SESSIONFILE
    for bar in $ANSWER; do
        for config in "${barPath[@]}"; do
            if grep -q "^\[bar/$bar\]" "$config" && ! grep -q "^$config\ $bar$" "$SESSIONFILE"; then
                echo "$config $bar" >> "$SESSIONFILE"
            fi
        done
    done
    while [[ $(pidof polybar) ]]; do pkill polybar; sleep 0.2; done
    while read -r c b; do
        if [[ "$c $b" =~ ^#.*$ ]] || [[ "$c $b" == "" ]] || ! [[ -f "$c" ]]; then
            continue
        fi
        if [[ -e "$c" ]]; then
            polybar --reload --config="$c" "$b" &
        fi
    done < "$SESSIONFILE"
}


# loop choice until "OK" is clicked
# If not returned any bars, ask to to go back to bar selection
# If returned any number of bars, call outer create_session function
main() {
    while ! [[ $ANSWER ]]; do
        running_Bars
        find_Bars
        ANSWER=$(zenity $ICON --list --title="$TITLE" --text="<big><b>Select bars to launch</b></big>
                        \nRunning bars will be checkmarked\nTo disable a running bar:\n\n\tUn-checkmark it and press Ok" \
                        --checklist --width=350 --height=400 --multiple --separator=" " \
                        --column="Select" --column="Bar Name" $BARS)
        if [[ $? == 1 ]]; then
            exit 0
        elif ! [[ $ANSWER ]]; then
            SURE=$(zenity $ICON --title="$TITLE" --question --width=300 --height=150 \
                          --ok-label="Go Back to Choice" --cancel-label="Stop Running Bars" \
                          --text="<big><b>No Bars Selected</b></big>\n\nWhat would you like to do?" &>/dev/null)
            if [[ $? == 1 ]]; then
                while [[ $(pidof polybar) ]]; do pkill polybar; sleep 0.2; done
                > $SESSIONFILE; exit 0
            else
                unset ANSWER   # Go Back to Choice
            fi
        else
            create_Session
        fi
        rm -r $TEMPFILE
    done
}

main

exit 0
