#+TITLE: Qtile Config
#+PROPERTY: header-args :tangle config.py

* Table of Contents :toc:
- [[#about-this-config][About This Config]]
- [[#required-programs][Required Programs]]
- [[#features-of-qtile][Features of Qtile]]
- [[#imports][Imports]]
- [[#variables][Variables]]
- [[#keybindings][Keybindings]]
- [[#groups][Groups]]
- [[#settings-for-some-layouts][Settings For Some Layouts]]
- [[#layouts][Layouts]]
- [[#colors][Colors]]
- [[#prompt][Prompt]]
- [[#default-widget-settings][Default Widget Settings]]
- [[#widgets][Widgets]]
- [[#screens][Screens]]
- [[#some-important-functions][Some Important Functions]]
- [[#drag-floating-windows][Drag floating windows]]
- [[#floating-windows][Floating windows]]
- [[#startup-applications][Startup applications]]

* About This Config
#+CAPTION: Qtile Scrot
#+ATTR_HTML: :alt Qtile Scrot :title Qtile Scrot :align left
[[https://gitlab.com/dwt1/dotfiles/-/raw/master/.screenshots/dotfiles07-thumb.png]]

The following comments are the copyright and licensing information from the default
qtile config. Copyright (c) 2010 Aldo Cortesi, 2010, 2014 dequis, 2012 Randall Ma,
2012-2014 Tycho Andersen, 2012 Craig Barnes, 2013 horsik, 2013 Tao Sauvage

Modified by Derek Taylor
- My YouTube: [[http://www.youtube.com/c/DistroTube][http://www.youtube.com/c/DistroTube]]
- My GitLab:  [[http://www.gitlab.com/dwt1/][http://www.gitlab.com/dwt1/]]

Modified by Kevin K.
- My GitHub:  [[http://www.gitlab.com/dwt1/][http://www.github.com/kbknapp/]]

Permission is hereby granted, free of charge, to any person obtaining a copy of this
software and associated documentation files (the "Software"), to deal in the Software
without restriction, including without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be included in all copies
or substantial portions of the Software.

* Required Programs

- For `memory` module: `pip install --upgrade psutil`
- picom

* Features of Qtile
- Simple, small and extensible. It's easy to write your own layouts, widgets and
  commands.
- Configured in Python.
- Command shell that allows all aspects of Qtile to be managed and inspected.
- Complete remote scriptability - write scripts to set up workspaces, manipulate
  windows, update status bar widgets and more.
- Qtile's remote scriptability makes it one of the most thoroughly unit-tested
  window managers around.

* Imports
These are python modules that must be imported for this config.

#+BEGIN_SRC python
# -*- coding: utf-8 -*-
import os
import re
import socket
import subprocess
from libqtile import qtile
from libqtile.config import Click, Drag, Group, KeyChord, Key, Match, Screen
from libqtile.command import lazy
from libqtile import layout, bar, widget, hook
from libqtile.lazy import lazy
from typing import List  # noqa: F401
#+END_SRC

* Variables
Just some variables I am setting to make my life easier.

#+BEGIN_SRC python
mod = "mod4"                     # Sets mod key to SUPER/WINDOWS
my_term = "alacritty"            # My terminal of choice
my_shell = "zsh"                 # My shell of choice
rofi_theme = "regolith-theme"    # My shell of choice
font_family = "Fantasque Sans Mono" # Font to use
#+END_SRC

* Keybindings
These are the keybindings for qtile.

| A FEW IMPORTANT KEYBINDINGS | ASSOCIATED ACTION                                              |
|-----------------------------+----------------------------------------------------------------|
| MODKEY + RETURN             | opens terminal                                                 |
| MODKEY + SPACE              | opens run launcher                                             |
| MODKEY + TAB                | rotates through the available layouts                          |
| MODKEY + SHIFT + q          | closes window with focus                                       |
| MODKEY + SHIFT + r          | restarts qtile                                                 |
| MODKEY + 1-9                | switch focus to workspace (1-9)                                |
| MODKEY + SHIFT + 1-9        | send focused window to workspace (1-9)                         |
| MODKEY + k                  | lazy layout up (switches focus between windows in the stack)   |
| MODKEY + j                  | lazy layout down (switches focus between windows in the stack) |
| MODKEY + SHIFT + k          | lazy layout shuffle_up (rotates the windows in the stack)      |
| MODKEY + SHIFT + j          | lazy layout shuffle_down (rotates the windows in the stack)    |
| MODKEY + period             | switch focus to next monitor                                   |
| MODKEY + comma              | switch focus to prev monitor                                   |

| KEYBINDINGS to change | ASSOCIATED ACTION                         |
|-----------------------+-------------------------------------------|
| MODKEY + h            | shrink size of window (MondadTall layout) |
| MODKEY + l            | expand size of window (MondadTall layout) |
| MODKEY + w            | switch focus to monitor 1                 |
| MODKEY + e            | switch focus to monitor 2                 |
| MODKEY + r            | switch focus to monitor 3                 |

Missing:

- move focus left/right
- Move workspace to monitor right/left

#+BEGIN_SRC python
keys = [
         ### The essentials
         Key([mod], "Return",
             lazy.spawn(my_term+" -e "+my_shell),
             desc='Launches My Terminal'
             ),
         Key([mod], "space",
             lazy.spawn("rofi_run -r --theme "+rofi_theme),
             desc='Run Launcher'
             ),
         Key([mod], "Tab",
             lazy.next_layout(),
             desc='Toggle through layouts'
             ),
         Key([mod, "shift"], "q",
             lazy.window.kill(),
             desc='Kill active window'
             ),
         Key([mod, "shift"], "r",
             lazy.restart(),
             desc='Restart Qtile'
             ),
         Key(["control", "shift"], "e",
             lazy.spawn("emacsclient -c -a emacs"),
             desc='Doom Emacs'
             ),
         ### Switch focus to specific monitor (out of three)
         Key([mod], "w",
             lazy.to_screen(0),
             desc='Keyboard focus to monitor 1'
             ),
         Key([mod], "e",
             lazy.to_screen(1),
             desc='Keyboard focus to monitor 2'
             ),
         Key([mod], "r",
             lazy.to_screen(2),
             desc='Keyboard focus to monitor 3'
             ),
         ### Switch focus of monitors
         Key([mod], "period",
             lazy.next_screen(),
             desc='Move focus to next monitor'
             ),
         Key([mod], "comma",
             lazy.prev_screen(),
             desc='Move focus to prev monitor'
             ),
         ### Treetab controls
         Key([mod, "control"], "k",
             lazy.layout.section_up(),
             desc='Move up a section in treetab'
             ),
         Key([mod, "control"], "j",
             lazy.layout.section_down(),
             desc='Move down a section in treetab'
             ),
         ### Window controls
         Key([mod], "k",
             lazy.layout.up(),
             desc='Move focus down in current stack pane'
             ),
         Key([mod], "j",
             lazy.layout.down(),
             desc='Move focus up in current stack pane'
             ),
         Key([mod, "shift"], "k",
             lazy.layout.shuffle_up(),
             desc='Move windows down in current stack'
             ),
         Key([mod, "shift"], "j",
             lazy.layout.shuffle_down(),
             desc='Move windows up in current stack'
             ),
         Key([mod], "h",
             lazy.layout.shrink(),
             lazy.layout.decrease_nmaster(),
             desc='Shrink window (MonadTall), decrease number in master pane (Tile)'
             ),
         Key([mod], "l",
             lazy.layout.grow(),
             lazy.layout.increase_nmaster(),
             desc='Expand window (MonadTall), increase number in master pane (Tile)'
             ),
         Key([mod], "n",
             lazy.layout.normalize(),
             desc='normalize window size ratios'
             ),
         Key([mod], "m",
             lazy.layout.maximize(),
             desc='toggle window between minimum and maximum sizes'
             ),
         Key([mod, "shift"], "f",
             lazy.window.toggle_floating(),
             desc='toggle floating'
             ),
         Key([mod, "shift"], "m",
             lazy.window.toggle_fullscreen(),
             desc='toggle fullscreen'
             ),
         ### Stack controls
         Key([mod, "shift"], "space",
             lazy.layout.rotate(),
             lazy.layout.flip(),
             desc='Switch which side main pane occupies (XmonadTall)'
             ),
         Key([mod, "control"], "Return",
             lazy.layout.toggle_split(),
             desc='Toggle between split and unsplit sides of stack'
             ),
         # Emacs programs launched using the key chord CTRL+e followed by 'key'
         KeyChord(["control"],"e", [
             Key([], "e",
                 lazy.spawn("emacsclient -c -a 'emacs'"),
                 desc='Launch Emacs'
                 ),
             Key([], "b",
                 lazy.spawn("emacsclient -c -a 'emacs' --eval '(ibuffer)'"),
                 desc='Launch ibuffer inside Emacs'
                 ),
             Key([], "d",
                 lazy.spawn("emacsclient -c -a 'emacs' --eval '(dired nil)'"),
                 desc='Launch dired inside Emacs'
                 ),
             Key([], "i",
                 lazy.spawn("emacsclient -c -a 'emacs' --eval '(erc)'"),
                 desc='Launch erc inside Emacs'
                 ),
             Key([], "m",
                 lazy.spawn("emacsclient -c -a 'emacs' --eval '(magit-status)'"),
                 desc='Launch magit inside Emacs'
                 ),
             Key([], "n",
                 lazy.spawn("emacsclient -c -a 'emacs' --eval '(elfeed)'"),
                 desc='Launch elfeed inside Emacs'
                 ),
             Key([], "s",
                 lazy.spawn("emacsclient -c -a 'emacs' --eval '(eshell)'"),
                 desc='Launch the eshell inside Emacs'
                 ),
             Key([], "v",
                 lazy.spawn("emacsclient -c -a 'emacs' --eval '(+vterm/here nil)'"),
                 desc='Launch vterm inside Emacs'
                 )
         ]),
         # Dmenu scripts launched using the key chord SUPER+p followed by 'key'
         KeyChord([mod], "p", [
             Key([], "w",
                 lazy.spawn("rofi_run -w --theme "+rofi_theme),
                 desc='Choose a window'
                 ),
             Key([], "r",
                 lazy.spawn("rofi_run --rust --theme "+rofi_theme),
                 desc='Open Rust docs'
                 ),
             Key([], "t",
                 lazy.spawn("rofi_run --en-es --theme "+rofi_theme),
                 desc='Translate en->es'
                 ),
             Key([], "T",
                 lazy.spawn("rofi_run --es-en --theme "+rofi_theme),
                 desc='Translate es->en'
                 ),
             Key([], "c",
                 lazy.spawn("rofi_run -c --theme "+rofi_theme),
                 desc='Clipboard'
                 ),
             Key([], "b",
                 lazy.spawn("rofi_run -b --theme "+rofi_theme),
                 desc='Clipboard'
                 ),
             Key([], "x",
                 lazy.spawn("rofi_run -l --theme "+rofi_theme),
                 desc='Logout/Lock/Shutdown'
                 ),
         ])
]
#+END_SRC

* Groups
Groups are really workspaces.

#+BEGIN_SRC python
group_names = [("1: ", {'layout': 'monadtall'}),
               ("2: ", {'layout': 'monadtall'}),
               ("3: ", {'layout': 'monadtall'}),
               ("4: ", {'layout': 'monadtall'}),
               ("5: ", {'layout': 'monadtall'}),
               ("6: ", {'layout': 'monadtall'}),
               ("7: ", {'layout': 'monadtall'}),
               ("8: ", {'layout': 'monadtall'}),
               ("9: ", {'layout': 'monadtall'}),
               ("10: ", {'layout': 'monadtall'}),
               ("11: ", {'layout': 'monadtall'}),
               ("12: ", {'layout': 'monadtall'}),
               ("13: ", {'layout': 'monadtall'}),
               ("14: ", {'layout': 'monadtall'}),
               ("15: ", {'layout': 'monadtall'}),
               ("16: ", {'layout': 'monadtall'}),
               ("17: ", {'layout': 'monadtall'}),
               ("18: ", {'layout': 'monadtall'}),
               ("19: ", {'layout': 'monadtall'}),
               ]

groups = [Group(name, **kwargs) for name, kwargs in group_names]

for i, (name, kwargs) in enumerate(group_names, 1):
    idx = i
    keys_combo = [mod]
    if i == 10:
        idx = 0
    elif i > 10:
        idx = idx - 10
        keys_combo = [mod, "shift", "control"]
    # Switch to another group
    keys.append(Key(keys_combo, str(idx), lazy.group[name].toscreen()))
    # Send current window to another group
    keys.append(Key(keys_combo, str(idx), lazy.window.togroup(name)))
#+END_SRC

* Settings For Some Layouts
Settings that I use in most layouts, so I'm defining them one time here.

#+BEGIN_SRC python
layout_theme = {"border_width": 2,
                "margin": 8,
                "border_focus": "e1acff",
                "border_normal": "1D2330"
                }
#+END_SRC

* Layouts
The layouts that I use, plus several that I don't use. Uncomment the layouts you want; comment out the ones that you don't want to use.

#+BEGIN_SRC python
layouts = [
    layout.MonadWide(**layout_theme),
    #layout.Bsp(**layout_theme),
    layout.Stack(stacks=2, **layout_theme),
    #layout.Columns(**layout_theme),
    #layout.RatioTile(**layout_theme),
    layout.VerticalTile(**layout_theme),
    layout.Matrix(**layout_theme),
    layout.Zoomy(**layout_theme),
    layout.MonadTall(**layout_theme),
    layout.Max(**layout_theme),
    layout.Tile(shift_windows=True, **layout_theme),
    layout.Stack(num_stacks=2),
    layout.TreeTab(
         font = font_family,
         fontsize = 10,
         sections = ["FIRST", "SECOND"],
         section_fontsize = 11,
         bg_color = "141414",
         active_bg = "90C435",
         active_fg = "000000",
         inactive_bg = "384323",
         inactive_fg = "a0a0a0",
         padding_y = 5,
         section_top = 10,
         panel_width = 320
         ),
    layout.Floating(**layout_theme)
]
#+END_SRC

* Colors
Defining some colors for use in our panel.  Colors have two values because you can use gradients.

#+BEGIN_SRC python
colors = [["#282c34", "#282c34"], # panel background
          ["#3d3f4b", "#434758"], # background for current screen tab
          ["#ffffff", "#ffffff"], # font color for group names
          ["#ff5555", "#ff5555"], # border line color for current tab
          ["#74438f", "#74438f"], # border line color for 'other tabs' and color for 'odd widgets'
          ["#4f76c7", "#4f76c7"], # color for the 'even widgets'
          ["#e1acff", "#e1acff"]] # window name
#+END_SRC

* Prompt
Settings for the qtile run prompt, even though I don't actually use this. I prefer to use dmenu instead.

#+BEGIN_SRC python
prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())
#+END_SRC

* Default Widget Settings
Defining a few default widget key values.

#+BEGIN_SRC python
##### DEFAULT WIDGET SETTINGS #####
widget_defaults = dict(
    font=font_family,
    fontsize = 12,
    padding = 2,
    background=colors[2]
)
extension_defaults = widget_defaults.copy()
#+END_SRC

* Widgets
This is the bar, or the panel, and the widgets within the bar.

#+BEGIN_SRC python
def init_widgets_list():
    widgets_list = [
              widget.Sep(
                       linewidth = 0,
                       padding = 6,
                       foreground = colors[2],
                       background = colors[0]
                       ),
              widget.Image(
                       filename = "~/.config/qtile/icons/python-white.png",
                       scale = "False",
                       mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn(my_term)}
                       ),
             widget.Sep(
                       linewidth = 0,
                       padding = 6,
                       foreground = colors[2],
                       background = colors[0]
                       ),
              widget.GroupBox(
                       font = font_family,
                       fontsize = 9,
                       margin_y = 3,
                       margin_x = 0,
                       padding_y = 5,
                       padding_x = 3,
                       borderwidth = 3,
                       active = colors[2],
                       inactive = colors[2],
                       rounded = False,
                       highlight_color = colors[1],
                       highlight_method = "line",
                       this_current_screen_border = colors[6],
                       this_screen_border = colors [4],
                       other_current_screen_border = colors[6],
                       other_screen_border = colors[4],
                       foreground = colors[2],
                       background = colors[0]
                       ),
              widget.Prompt(
                       prompt = prompt,
                       font = font_family,
                       padding = 10,
                       foreground = colors[3],
                       background = colors[1]
                       ),
              widget.Sep(
                       linewidth = 0,
                       padding = 40,
                       foreground = colors[2],
                       background = colors[0]
                       ),
              widget.WindowName(
                       foreground = colors[6],
                       background = colors[0],
                       padding = 0
                       ),
              widget.Systray(
                       background = colors[0],
                       padding = 5
                       ),
              widget.Sep(
                       linewidth = 0,
                       padding = 6,
                       foreground = colors[0],
                       background = colors[0]
                       ),
#              widget.TextBox(
#                       text = '',
#                       background = colors[0],
#                       foreground = colors[4],
#                       padding = 0,
#                       fontsize = 37
#                       ),
#             widget.Net(
#                       interface = "enp6s0",
#                       format = '{down} ↓↑ {up}',
#                       foreground = colors[2],
#                       background = colors[4],
#                       padding = 5
#                       ),
              widget.TextBox(
                       text = '',
                       background = colors[4],
                       foreground = colors[5],
                       padding = 0,
                       fontsize = 37
                       ),
              widget.TextBox(
                       text = " 🌡",
                       padding = 2,
                       foreground = colors[2],
                       background = colors[5],
                       fontsize = 11
                       ),
              widget.ThermalSensor(
                       foreground = colors[2],
                       background = colors[5],
                       threshold = 90,
                       padding = 5
                       ),
              widget.TextBox(
                       text='',
                       background = colors[5],
                       foreground = colors[4],
                       padding = 0,
                       fontsize = 37
                       ),
              widget.TextBox(
                       text = " ⟳",
                       padding = 2,
                       foreground = colors[2],
                       background = colors[4],
                       fontsize = 14
                       ),
              widget.CheckUpdates(
                       update_interval = 1800,
                       distro = "Arch_checkupdates",
                       display_format = "{updates} Updates",
                       foreground = colors[2],
                       mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn(my_term + ' -e sudo pacman -Syu')},
                       background = colors[4]
                       ),
              widget.TextBox(
                       text = '',
                       background = colors[4],
                       foreground = colors[5],
                       padding = 0,
                       fontsize = 37
                       ),
              widget.TextBox(
                       text = " 🖬",
                       foreground = colors[2],
                       background = colors[5],
                       padding = 0,
                       fontsize = 14
                       ),
              widget.Memory(
                       foreground = colors[2],
                       background = colors[5],
                       mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn(my_term + ' -e htop')},
                       padding = 5
                       ),
#              widget.TextBox(
#                       text='',
#                       background = colors[5],
#                       foreground = colors[4],
#                       padding = 0,
#                       fontsize = 37
#                       ),
#              widget.TextBox(
#                       text = " ₿",
#                       padding = 0,
#                       foreground = colors[2],
#                       background = colors[4],
#                       fontsize = 12
#                       ),
#              widget.BitcoinTicker(
#                       foreground = colors[2],
#                       background = colors[4],
#                       padding = 5
#                       ),
#              widget.TextBox(
#                       text = '',
#                       background = colors[4],
#                       foreground = colors[5],
#                       padding = 0,
#                       fontsize = 37
#                       ),
#              widget.TextBox(
#                      text = " Vol:",
#                       foreground = colors[2],
#                       background = colors[5],
#                       padding = 0
#                       ),
#              widget.Volume(
#                       foreground = colors[2],
#                       background = colors[5],
#                       padding = 5
#                       ),
              widget.TextBox(
                       text = '',
                       background = colors[5],
                       foreground = colors[4],
                       padding = 0,
                       fontsize = 37
                       ),
              widget.CurrentLayoutIcon(
                       custom_icon_paths = [os.path.expanduser("~/.config/qtile/icons")],
                       foreground = colors[0],
                       background = colors[4],
                       padding = 0,
                       scale = 0.7
                       ),
              widget.CurrentLayout(
                       foreground = colors[2],
                       background = colors[4],
                       padding = 5
                       ),
              widget.TextBox(
                       text = '',
                       background = colors[4],
                       foreground = colors[5],
                       padding = 0,
                       fontsize = 37
                       ),
              widget.Clock(
                       foreground = colors[2],
                       background = colors[5],
                       format = "%A, %B %d - %H:%M "
                       ),
              ]
    return widgets_list
#+END_SRC

* Screens
Screen settings for my triple monitor setup.

#+BEGIN_SRC python
#def init_widgets_screen1():
#    widgets_screen1 = init_widgets_list()
#    del widgets_screen1[7:8]               # Slicing removes unwanted widgets (systray) on #Monitors 1,3
#    return widgets_screen1

def init_widgets_screen2():
    widgets_screen2 = init_widgets_list()
    return widgets_screen2                 # Monitor 2 will display all widgets in widgets_list

def init_screens():
    return [#Screen(top=bar.Bar(widgets=init_widgets_screen1(), opacity=1.0, size=20)),
            Screen(top=bar.Bar(widgets=init_widgets_screen2(), opacity=1.0, size=20))]
            #Screen(top=bar.Bar(widgets=init_widgets_screen1(), opacity=1.0, size=20))]

if __name__ in ["config", "__main__"]:
    screens = init_screens()
    widgets_list = init_widgets_list()
    #widgets_screen1 = init_widgets_screen1()
    widgets_screen2 = init_widgets_screen2()
#+END_SRC

* Some Important Functions

#+begin_src python
def window_to_prev_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
        qtile.currentWindow.togroup(qtile.groups[i - 1].name)

def window_to_next_group(qtile):
    if qtile.currentWindow is not None:
        i = qtile.groups.index(qtile.currentGroup)
        qtile.currentWindow.togroup(qtile.groups[i + 1].name)

def window_to_previous_screen(qtile):
    i = qtile.screens.index(qtile.current_screen)
    if i != 0:
        group = qtile.screens[i - 1].group.name
        qtile.current_window.togroup(group)

def window_to_next_screen(qtile):
    i = qtile.screens.index(qtile.current_screen)
    if i + 1 != len(qtile.screens):
        group = qtile.screens[i + 1].group.name
        qtile.current_window.togroup(group)

def switch_screens(qtile):
    i = qtile.screens.index(qtile.current_screen)
    group = qtile.screens[i - 1].group
    qtile.current_screen.set_group(group)
#+end_src

* Drag floating windows
Defining some mousebindings for use with floating windows.

#+BEGIN_SRC python
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front())
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: List
main = None
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
#+END_SRC

* Floating windows
Defining what class of windows should always be floating.

#+BEGIN_SRC python
floating_layout = layout.Floating(float_rules=[
    # Run the utility of `xprop` to see the wm class and name of an X client.
    # default_float_rules include: utility, notification, toolbar, splash, dialog,
    # file_progress, confirm, download and error.
    ,*layout.Floating.default_float_rules,
    Match(title='Confirmation'),  # tastyworks exit box
    Match(title='Qalculate!'),  # qalculate-gtk
    Match(wm_class='kdenlive'),  # kdenlive
    Match(wm_class='pinentry-gtk-2'),  # GPG key password entry
])
auto_fullscreen = True
focus_on_window_activation = "smart"
#+END_SRC

* Startup applications
The applications that should autostart every time qtile is started.

#+BEGIN_SRC python
@hook.subscribe.startup_once
def start_once():
    home = os.path.expanduser('~')
    subprocess.call([home + '/.config/qtile/autostart.sh'])

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
#+END_SRC
