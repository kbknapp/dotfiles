#!/usr/bin/env bash


# Written for use in ArchLabs by Josiah Ward
# Touched up and improved by Nathaniel Maia



# check we have required programs installed
if ! hash zenity &>/dev/null; then
    echo "[ERROR]: Missing Commands. It is required to install 'zenity'"
    exit 1
fi
if [ $# -gt 0 ]; then
    echo -e "This is the ArchLabs Panel Switcher and Dock Launcher
    \n\nThis program takes no arguments.. Just run al-panel-chooser"
    exit 2
fi

# This should be done first in order to determine WM for other variables
# loop over window_Managers until we get a match at which point set WM=match and break loop
window_Managers=(bspwm i3 openbox awesome xfce)
for wm in "${window_Managers[@]}"; do
    if [[ "$(wmctrl -m | grep -i name | awk '{print tolower($2)}')" == "$wm" ]]; then
        WM=$wm && break
    elif [[ "$(xprop -root -notype | grep "WM_NAME =" | tr -d '"' | awk '{print tolower($3)}')" == "$wm" ]]; then
        WM=$wm && break
    elif [[ "$(awk '{print tolower($0)}' <<< "$XDG_CURRENT_DESKTOP")" == "$wm" ]]; then
        WM=$wm && break
    fi
done

START="$HOME/.config/openbox/autostart"
PPATH="$HOME/.config/polybar"
TPATH="$HOME/.config/tint2"
LIST="zenity --list --radiolist --width=350 --height=400"
TITLE="ArchLabs Panel Chooser"
ICON="--window-icon=/usr/share/icons/hicolor/256x256/apps/al-hello-logo.png"
MESSAGE="<big><b>Archlabs Panel Chooser</b></big>\n\nWhat would you like to do?"

# If $WM is set, set sessionfiles to $WM-sessionfile
# Otherwise default to just sessionfile
if [[ "$WM" ]]; then
    PSESSION="$PPATH/sessions/$WM-sessionfile"
    TSESSION="$TPATH/sessions/$WM-sessionfile"
else
    PSESSION="$PPATH/sessions/sessionfile"
    TSESSION="$TPATH/sessions/sessionfile"
fi

setup() {
    unset DOCKS
    dockCheck=(plank docky cairo-dock)
    # finds our docks and whether they are running or not
    for i in "${dockCheck[@]}"; do
        if hash "$i" &>/dev/null && pgrep "$i" &>/dev/null; then
            DOCKS="$DOCKS TRUE $i"
            dockArr+=("$i")
        elif hash "$i" &>/dev/null; then
            DOCKS="$DOCKS FALSE $i"
            dockArr+=("$i")
        fi
    done
}

setup_polybar() {
    if ! [ -d "$PPATH" ] && [ -d "/etc/skel/.config/polybar" ]; then
        cp -rf /etc/skel/.config/polybar "$HOME/.config/"
        sed -i '/base/{n;N;N;d}' "$PPATH/config"
        sed -i "/base/ a include-file = ${HOME}/.config/polybar/master.conf" "$PPATH/config"
        sed -i "/base/ a include-file = ${HOME}/.config/polybar/modules.conf" "$PPATH/config"
        sed -i "s/liveuser/${USER}/g" "$PSESSION"
    fi
    if [ -f "$START" ] && ! grep -q "al-polybar-session" "$START"; then
        if grep -q "tint2" "$START"; then
            sed -i '/tint2/ a sleep 1; al-polybar-session &' "$START"
            sed -i '/tint2/d' "$START"
        elif grep -q "nitrogen" "$START"; then
            sed -i '/nitrogen/ a sleep 1; al-polybar-session &' "$START"
        else
            sed -i '1s/^/sleep 1; al-polybar-session & \n/' "$START"
        fi
    fi
    if ! [ -f "$PSESSION" ]; then
        mkdir -p "$PPATH/sessions"
        echo "$PPATH/config $WM-bar" > "$PSESSION"
    fi
    if pgrep tint2 &>/dev/null; then pkill tint2; fi
    if pgrep polybar &>/dev/null; then pkill polybar; fi
    if hash al-polybar-session &>/dev/null; then
        al-polybar-session &
    else
        polybar --reload --config="$HOME/.config/polybar/config" "$WM-bar" &
    fi
}

setup_tint2() {
    if ! [ -d "$TPATH" ] && [ -d "/etc/skel/.config/tint2" ]; then
        cp -rf /etc/skel/.config/tint2 "$HOME/.config/"
    fi
    if [ -e "$START" ] && ! grep -q "al-tint2-session" "$START"; then
        if grep -q "polybar" "$START"; then
            sed -i '/polybar/ a sleep 1; al-tint2-session &' "$START"
            sed -i '/polybar/d' "$START"
        elif grep -q "nitrogen" "$START"; then
            sed -i '/nitrogen/ a sleep 1; al-tint2-session &' "$START"
        else
            sed -i '1s/^/al-tint2-session & \n/' "$START"
        fi
    fi
    if ! [ -f "$TSESSION" ]; then
        mkdir -p "$TPATH/sessions"
        echo "$TPATH/tint2rc" > "$TSESSION"
    fi
    if pgrep polybar &>/dev/null; then pkill polybar; fi
    if pgrep tint2 &>/dev/null; then pkill tint2; fi
    if hash al-tint2-session &>/dev/null; then
        al-tint2-session &
    else
        tint2 -c "$TPATH/tint2rc" &>/dev/null &
    fi
}

main_dialog() {
    # Setup dialog depending on what apps we have installed
    if hash tint2 polybar &>/dev/null; then
        if [ ${#dockArr[@]} -gt 0 ]; then
            choice=$($LIST --title="$TITLE" $ICON --column Select --text="$MESSAGE" \
                --column Option FALSE "Setup Polybar" FALSE "Setup Tint2" FALSE "Setup or Disable Docks")
        else
            choice=$($LIST --title="$TITLE" $ICON --column Select --text="$MESSAGE" \
                --column Option FALSE "Setup Polybar" FALSE "Setup Tint2")
        fi
    elif hash polybar &>/dev/null; then
        if [ ${#dockArr[@]} -gt 0 ]; then
            choice=$($LIST --title="$TITLE" $ICON --column Select --text="$MESSAGE" \
                --column Option FALSE "Setup Polybar" FALSE "Setup or Disable Docks")
        else
            choice=$($LIST --title="$TITLE" $ICON --column Select --text="$MESSAGE" \
                --column Option FALSE "Setup Polybar")
        fi
    elif hash tint2 &>/dev/null; then
        if [ ${#dockArr[@]} -gt 0 ]; then
            choice=$($LIST --title="$TITLE" $ICON --column Select --text="$MESSAGE" \
                --column Option FALSE "Setup Tint2" FALSE "Setup or Disable Docks")
        else
            choice=$($LIST --title="$TITLE" $ICON --column Select --text="$MESSAGE" \
                --column Option FALSE "Setup Tint2")
        fi
    else
        choice=$(zenity --info --title="$TITLE" $ICON --width=250 --height=150 \
            --text="<big><b>You have no Panels or Docks..</b></big>\n\nPlease install a Panel or a Dock")
    fi
    if [[ $? == 1 ]]; then exit 0; fi
}


setup_dock() {
    while ! [[ "$dock" ]]; do
        setup
        dock=$(zenity --list --checklist --multiple $ICON --title="$TITLE" \
            --text="<big><b>Please Choose Docks to Setup</b></big>
        \nRunning docks will be checkmarked\nTo disable a running dock:\n\n\tUn-checkmark it and press Ok\n" \
            --width=350 --height=400 --column="Select" --column="Dock" $DOCKS \
            --cancel-label="Go Back" --ok-label="Ok" --separator=" ")
        if [[ $? == 1 ]]; then unset dock choice; break; fi
        if ! [[ "$dock" ]]; then
            for d in "${dockArr[@]}"; do
                if pgrep "$d" &>/dev/null; then pkill "$d"; fi
                if [[ -e "$START" ]] && grep -q "$d" "$START"; then sed -i "/${d}/d" "$START"; fi
            done
            check_if_done "Disabling Docks"
        else
            for d in "${dockArr[@]}"; do
                if pgrep "$d" &>/dev/null; then pkill "$d"; fi
                if [[ -e "$START" ]] && grep -q "$d" "$START"; then sed -i "/${d}/d" "$START"; fi
            done
            for selected in $dock; do
                if [[ -e "$START" ]] && ! grep -q "$selected" "$START"; then echo "sleep 1; $selected &" >> "$START"; fi
                $selected &
            done
            check_if_done "Dock Setup"
        fi
    done
}


check_choice_made() {
    if ! [[ "$choice" ]]; then
        sure=$(zenity $ICON --title="$TITLE" --question --width=250 --height=150 \
            --ok-label="Yes Please" --cancel-label="No Thanks" \
            --text="<big><b>Nothing Selected</b></big>\n\nWant to go back?" &>/dev/null)
        if [[ $? == 1 ]]; then
            exit 0
        else
            unset choice dock
        fi
    fi
}


# Requires name of app being setup
check_if_done() {
    am_done=$(zenity $ICON --title="$TITLE" --question --width=250 \
        --height=150 --ok-label="Yes Please" --cancel-label="No Thanks" \
        --text="<big><b>$1 Complete</b></big>\n\nWant to do something else?" &>/dev/null)
    if [[ $? == 1 ]]; then
        exit 0
    else
        unset choice dock
    fi
}


panel_switch() {
    while ! [[ "$choice" ]]; do
        setup
        main_dialog
        check_choice_made
        if [[ "$choice" == *Polybar ]]; then
            setup_polybar
        elif [[ "$choice" == *Tint2 ]]; then
            setup_tint2
        elif [[ "$choice" = *Docks ]]; then
            setup_dock
        fi
    done
}


# Do the switch
panel_switch

exit 0
